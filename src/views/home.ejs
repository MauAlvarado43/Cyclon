<% if(context.type==null || context.type==undefined){ %>
    <script> window.location.href="/" </script>
<% } else { %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    
    <meta name="description" content="Free cyclone's alerts">
    <meta name="author" content="Cyclon">

    <title> <%= title %> </title>

    <meta property="og:site_name" content="Cyclon" />
	<meta property="og:site" content="http://cyclon.com.mx/"/>
	<meta property="og:title" content="<%= title %>"/>
	<meta property="og:description" content="Main page" />
	<meta property="og:image" content="/images/favicon.ico"/>
	<meta property="og:url" content="http://cyclon.com.mx/"/>
	<meta property="og:type" content="article" />

    <link href="https://fonts.googleapis.com/css?family=Montserrat:400,600,700" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:400,400i,700,700i" rel="stylesheet">
    <link href="/css/bootstrap.css" rel="stylesheet">
    <link href="/css/fontawesome-all.css" rel="stylesheet">
    <link href="/css/swiper.css" rel="stylesheet">
	<link href="/css/magnific-popup.css" rel="stylesheet">
    <link href="/css/styles.css" rel="stylesheet">
    <link href="/css/alert.css" rel="stylesheet">

    <link rel="icon" href="/images/favicon.ico">
    
</head>
<body data-spy="scroll" data-target=".fixed-top">

    <%- include("./components/loader") %>

    <%- include("./components/navbar-register",{assets: assets}) %> 

    <div class="basic-1">
        <div class="container">
            <div class="row">
                <div class="col-8">
                    <center><h2><%= (assets.alerts).toUpperCase() %></h2></center>
                    <center>
                        <%- include("./components/map",{assets: assets}) %> 
                    </center>
                </div>
                <div class="col-4"  id="panelAlert">
                    
                </div>
            </div>
        </div>
    </div>
 
    <%- include("./components/footer",{assets: assets}) %> 

</body>

<script src="/js/lib/jquery.min.js"></script>
<script src="/js/lib/popper.min.js"></script>
<script src="/js/lib/bootstrap.min.js"></script>
<script src="/js/lib/jquery.easing.min.js"></script>
<script src="/js/lib/swiper.min.js"></script>
<script src="/js/lib/jquery.magnific-popup.js"></script>
<script src="/js/lib/morphext.min.js"></script>
<script src="/js/lib/validator.min.js"></script>
<script src="/js/lib/scripts.js"></script>
<script src="/js/lib/socket.io.js"></script>
<script src="/js/alertManager.js"></script>
<script src="/js/lib/alert.js"></script>
<script src="/js/lib/cycloneUtils.js"></script>

<script>

    const assets = JSON.parse('<%- JSON.stringify(assets) %>')

    document.getElementById("homeButton").setAttribute("href","#")
    document.getElementById("homeImageButton").setAttribute("href","#")
    document.getElementById("privacyButton").setAttribute("href","/privacy")
    document.getElementById("termsButton").setAttribute("href","/terms")

    document.getElementById("homeButton").setAttribute("class","nav-link page-scroll active")

    const socket = io("/")

    socket.on("/alert", (data) => {
        let distance =  getDistance(latUser, lngUser, data.data.location.lat, data.data.location.lng)
        let radious = getCategoryRadiousByCAT(data.data.category)
        let message = ''
        
        if(data.update)
            message = assets.alertMessages.update + " " + getCategoryMessage(data.data.category).replace("$",data.data.name) + " " + assets.alertMessages.closeness.replace("$", distance)
        else
            message = assets.alertMessages.detected + " " + getCategoryMessage(data.data.category).replace("$",data.data.name) + " " + assets.alertMessages.closeness.replace("$", distance)

        if(radious < distance < 250 + radious)
            alert.error(message,assets.updated_alerts)
        else
            alert.show(message,assets.updated_alerts)

        getActiveCyclones()
        
    })

</script>

<% if(!context.verify){ %>
    <script>
        const addPanelInfo = false
        alert.show(assets.verification,assets.notice)
        $("#panelAlert").html(`
                <br><br><br><br><br><br><br><br><br><br><br>
                <center>
                    <h4>${assets.verification}</h4>
                </center>
            `)
    </script>
<% } else { %>
    <script>
        const addPanelInfo = () => {

            let alerts = []

            latUser = parseFloat('<%- functions.decryptAES(context.location.lat) %>')
            lngUser =  parseFloat('<%- functions.decryptAES(context.location.lng) %>')

            if(activeCyclones.length == 0)
                $("#panelAlert").html(`
                    <br><br><br><br><br><br><br><br><br><br><br>
                    <center>
                        <h4>${assets.alertMessages.no_alerts}</h4>
                    </center>
                `)
        
            activeCyclones.forEach(element => {
        
                let lastPoint =  element.realTrajectory[element.realTrajectory.length - 1]
                let [category, radious] = getCategoryRadious(lastPoint.windSpeed)
                let icon = getIcon(element.category)

                let distance = getDistance(latUser, lngUser, lastPoint.position.lat, lastPoint.position.lng)

                let latlngsReal = []

                element.realTrajectory.forEach(point => {
                    latlngsReal.push([point.position.lat, point.position.lng, point.windSpeed])
                })

                let layerRealTrayectory = new L.Hotline(latlngsReal, {
                    min: 119,
                    max: 250,
                    palette: {
                        0.0: '#00bc79',
                        0.5: '#887c73',
                        1.0: '#a9136c'
                    },
                    weight: 6,
                    outlineColor: '#000000',
                    outlineWidth: 1
                }).addTo(map_const)

                layerRealTrayectory.on('mouseover', () => { layerRealTrayectory.setStyle({ weight: 4 }) })
        
                layerRealTrayectory.on('mouseout', () => { layerRealTrayectory.setStyle({ weight: 3 }) })

                layerRealTrayectory.on('click', function (e) {

                    let latClicked = e.latlng.lat
                    let lngClicked = e.latlng.lng
                    let distance = 9999999
                    let toShow = {}

                    element.realTrajectory.forEach(item => {
                        let distanceTemp = getDistance(latClicked,lngClicked,item.position.lat,item.position.lng)
                        if(distanceTemp<distance){
                            distance = distanceTemp
                            toShow = item
                        }
                    }) 

                    let popup = `
                        <h6 style="color:black;">${assets.units.latitude.label}:  ${Math.round((latClicked) * 100) / 100}</h6>
                        <h6 style="color:black;">${assets.units.longitude.label}:  ${Math.round((lngClicked) * 100) / 100}</h6>

                        <h6 style="color:black;">${assets.units.windSpeed.label}:  ${((toShow.windSpeed == 0) ? assets.not_registered : Math.round(toShow.windSpeed * 100) / 100 + assets.units.windSpeed.unit)}</h6>
                        <h6 style="color:black;">${assets.units.hurrSpeed.label}:  ${((toShow.hurrSpeed == 0) ? assets.not_registered : Math.round(toShow.hurrSpeed * 100) / 100 + assets.units.hurrSpeed.unit)}</h6>
                        <h6 style="color:black;">${assets.units.temperature.label}:  ${((toShow.temperature == 0) ? assets.not_registered : Math.round(toShow.temperature * 100) / 100 + assets.units.windSpeed.unit)}</h6>
                        <h6 style="color:black;">${assets.units.pressure.label}:  ${((toShow.pressure == 0) ? assets.not_registered : Math.round(((toShow.pressure<100) ? toShow.pressure*100 : toShow.pressure) * 100) / 100 + assets.units.windSpeed.unit)}</h6>

                        <h6 style="color:black;">${assets.date}: ${(new Date(toShow.date)).toLocaleString()}</h6>
                    `

                    L.popup().setLatLng([e.latlng.lat, e.latlng.lng]).setContent(popup).openOn(map_const)

                })

                let latlngsPredicted = []

                element.predictedTrajectory.forEach(point => {
                    latlngsPredicted.push([point.position.lat, point.position.lng, point.windSpeed])
                })

                let layerPredictedTrayectory = new L.Hotline(latlngsPredicted, {
                    min: 119,
                    max: 250,
                    palette: {
                        0.0: '#0081b6',
                        0.5: '#895762',
                        1.0: '#a41214'
                    },
                    weight: 6,
                    outlineColor: '#000000',
                    outlineWidth: 1
                }).addTo(map_const)

                layerPredictedTrayectory.on('mouseover', () => { layerPredictedTrayectory.setStyle({ weight: 4 }) })

                layerPredictedTrayectory.on('mouseout', () => { layerPredictedTrayectory.setStyle({ weight: 3 }) })

                layerPredictedTrayectory.on('click', function (e) {

                    let latClicked = e.latlng.lat
                    let lngClicked = e.latlng.lng
                    let distance = 9999999
                    let toShow = {}

                    element.predictedTrajectory.forEach(item => {
                        let distanceTemp = getDistance(latClicked,lngClicked,item.position.lat,item.position.lng)
                        if(distanceTemp<distance){
                            distance = distanceTemp
                            toShow = item
                        }
                    }) 

                    let popup = `
                        <h6 style="color:black;">${assets.units.latitude.label}:  ${Math.round((latClicked) * 100) / 100}</h6>
                        <h6 style="color:black;">${assets.units.longitude.label}:  ${Math.round((lngClicked) * 100) / 100}</h6>

                        <h6 style="color:black;">${assets.units.windSpeed.label}:  ${((toShow.windSpeed == 0) ? assets.not_registered : Math.round(toShow.windSpeed * 100) / 100 + assets.units.windSpeed.unit)}</h6>
                        <h6 style="color:black;">${assets.units.hurrSpeed.label}:  ${((toShow.hurrSpeed == 0) ? assets.not_registered : Math.round(toShow.hurrSpeed * 100) / 100 + assets.units.hurrSpeed.unit)}</h6>
                        <h6 style="color:black;">${assets.units.temperature.label}:  ${((toShow.temperature == 0) ? assets.not_registered : Math.round(toShow.temperature * 100) / 100 + assets.units.temperature.unit)}</h6>
                        <h6 style="color:black;">${assets.units.pressure.label}:  ${((toShow.pressure == 0) ? assets.not_registered : Math.round(((toShow.pressure<100) ? toShow.pressure*100 : toShow.pressure) * 100) / 100 + assets.units.pressure.unit)}</h6>

                        <h6 style="color:black;">${assets.date}: ${(new Date(toShow.date)).toLocaleString()}</h6>
                    `

                    L.popup().setLatLng([e.latlng.lat, e.latlng.lng]).setContent(popup).openOn(map_const)

                })

                var iconMarker = L.icon({
                    iconUrl: icon,
                    iconSize: [30, 30],
                    popupAnchor: [-3, -76]
                })

                var marker = L.marker([element.realTrajectory[element.realTrajectory.length-1].position.lat, element.realTrajectory[element.realTrajectory.length-1].position.lng], { icon: iconMarker }).addTo(map_const);
                
                marker.on('click', (e) => {
                    map_const.fitBounds(layerRealTrayectory.getBounds())
                    L.popup().setLatLng([e.latlng.lat, e.latlng.lng]).setContent(`<h4 style="color:black;">${element.name}</h4><h6 style="color:black;">${assets.simbology.position}: ${element.realTrajectory[element.realTrajectory.length-1].position.lat}N,  ${element.realTrajectory[element.realTrajectory.length-1].position.lng}W</h6><h6 style="color: black;">${assets.simbology.category}: ${category}</h6>`).openOn(map_const)
                })
                
                if(distance<radious+250){

                    alerts.push({
                        cyclone: element,
                        distance,
                        category,
                    })

                    L.polyline([
                        [latUser, lngUser],
                        [element.realTrajectory[element.realTrajectory.length-1].position.lat, element.realTrajectory[element.realTrajectory.length-1].position.lng]
                    ], {
                        color: 'red',
                        weight: 2,
                        opacity: 0.7,
                        dashArray: '4,12,20,12',
                        lineJoin: 'miter',
                        lineCap: 'square'
                    }).addTo(map_const)

                }
                    

                L.marker([latUser, lngUser], { icon: L.icon({
                    iconUrl: "/images/location.png",
                    iconSize: [30, 30],
                    popupAnchor: [-3, -76]
                }) }).addTo(map_const).on('click', (e) => {
                    L.popup().setLatLng([e.latlng.lat, e.latlng.lng]).setContent(`<h6 style="color:black;">${assets.you}</h6>`).openOn(map_const)
                })

            })

            if(alerts.length != 0){

                alert.show(assets.check_alerts,assets.simbology.alerts_close)

                let html = `<br><br><br><div style="align-items: center; vertical-align: middle;">
                                <h3>${assets.simbology.alerts_close.toUpperCase()}</h3>`

                alerts.forEach(element => {
                    html += `<div class="row">
                                    <div class="col">
                                        ${assets.simbology.name}: ${element.cyclone.name}    
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col">
                                        ${assets.simbology.category}: ${element.category}    
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col">
                                        ${assets.units.distance.label}: ${Math.round(element.distance*100)/100} ${assets.units.distance.unit}    
                                    </div>
                                </div>
                                `
                    if(element!=alerts[alerts.length - 1])
                        html += `<hr style="background-color: white;">`      
                })  

                html += `</div>`

                $("#panelAlert").html(html)
            }
            else 
                $("#panelAlert").html(`
                        <br><br><br><br><br><br><br><br><br><br><br>
                        <center>
                            <h4>${assets.no_alerts_close}</h4>
                        </center>
                    `)
        }
    </script>
<% } %>

</html>
<% } %>