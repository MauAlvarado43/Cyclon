{"version":3,"sources":["../src/server.js"],"names":["app","server","http","createServer","store","session","corsOptions","origin","require","config","use","name","secret","resave","saveUninitialized","expires","req","res","next","user","cookies","logIn","JSON","parse","err","graphiql","schema","context","set","process","env","PORT","bodyParser","urlencoded","extended","json","passport","initialize","infoLog","stream","express","static","path","join","__dirname","listen","get","console","log"],"mappings":"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","file":"server.js","sourcesContent":["import express from 'express'\r\nimport http from 'http'\r\nimport compression from 'compression'\r\nimport session from 'express-session'\r\nimport helmet from 'helmet'\r\nimport bodyParser from 'body-parser'\r\nimport cookieParser from 'cookie-parser'\r\nimport memoryStore from 'session-memory-store'\r\nimport cors from 'cors'\r\nimport passport from 'passport'\r\nimport morgan from 'morgan'\r\nimport flash from 'connect-flash'\r\nimport path from 'path'\r\nimport graphqlHTTP from 'express-graphql'\r\nimport schema from './config/schema'\r\nimport { infoLog } from './utils/logger'\r\nimport { decryptAES } from './utils/cipher'\r\n\r\n// Initialzing packages\r\nconst app = express()\r\nconst server = http.createServer(app)\r\nconst store = memoryStore(session)\r\nconst corsOptions = {\r\n    origin: '*'\r\n}\r\n\r\nrequire('dotenv').config()\r\nrequire('./config/database')\r\nrequire('./passport/local-auth')\r\nrequire('./passport/google-auth')\r\nrequire('./passport/facebook-auth')\r\n\r\n// Middlewares\r\napp.use(session({\r\n    name: 'JSESSION',\r\n    secret: 'secret',\r\n    resave: true,\r\n    saveUninitialized: true,\r\n    store: new store({\r\n        expires: 60 * 60 * 12\r\n    })\r\n}))\r\n\r\napp.use('*', (req,res,next) => {\r\n    if(!req.user && req.cookies && req.cookies.user){\r\n        req.logIn(decryptAES(JSON.parse(req.cookies.user)), function(err) {\r\n            next()\r\n        })\r\n    }\r\n    else next()\r\n})\r\n\r\napp.use('/graphql', (req,res,next) => { \r\n    graphqlHTTP({\r\n            graphiql: false,\r\n            schema: schema,\r\n            context: req.session\r\n        })(req, res, next)\r\n    }\r\n)\r\n\r\napp.use((req, res, next) => {\r\n    res.set('Cache-Control', 'no-store')\r\n    next()\r\n})\r\n\r\n// Settings\r\napp.set('port', process.env.PORT || 3000)\r\napp.use(helmet())\r\napp.use(compression())\r\napp.use(bodyParser.urlencoded({ extended: true }))\r\napp.use(bodyParser.json())\r\napp.use(cookieParser('secret'))\r\napp.use(passport.initialize())\r\napp.use(passport.session())\r\napp.use(morgan('combined', { 'stream': infoLog.stream }))\r\napp.use(cors(corsOptions))\r\napp.use(express.static(path.join(__dirname, 'public')))\r\napp.use(flash())\r\napp.set('view engine','ejs')\r\napp.set('views','src/views')\r\n\r\n//Routes\r\napp.use(require('./routes/unregister'))\r\napp.use(require('./routes/register'))\r\napp.use(require('./routes/admin')(server))\r\napp.use(require('./routes/investigator'))\r\n\r\n// Start the server\r\nserver.listen(app.get('port'),'0.0.0.0', () => {\r\n    console.log('Server on port', app.get('port'))\r\n})\r\n\r\nexport default server"]}