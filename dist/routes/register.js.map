{"version":3,"sources":["../../src/routes/register.js"],"names":["router","get","req","res","language","acceptsLanguages","assets","JSON","parse","fs","readFileSync","path","join","__dirname","user","redirect","render","title","titles","records","context","functions","decryptAES","query","v","u","email","User","find","docs","length","session","tokenRecover","userRecover","recoverPassword","errors","TOKEN_INVALID","verify","updateOne","$set","err","raw","errorLog","error","update_info","name","lastName","type","json","geo","geoip","lookup","ip","ll","lat","lng","destroy","logout","post","allowChanges","password","body","userValidation","validateUser","newName","newApat","newEmail","module","exports"],"mappings":"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","file":"register.js","sourcesContent":["import {Router} from 'express'\r\nimport path from 'path'\r\nimport fs from 'fs'\r\nimport { validateToken, decryptAES, decryptFront, encryptAES } from '../utils/cipher'\r\nimport { UserModel as User } from '../models/UserModel'\r\nimport { errorLog } from '../utils/logger'\r\nimport { sendEmail } from '../utils/email'\r\nimport geoip from 'geoip-lite'\r\n\r\n\r\nconst router = Router()\r\n\r\n/***************************************\r\n                Rendering\r\n***************************************/\r\n\r\nrouter.get('/home', (req,res) => {\r\n    let language = req.acceptsLanguages('es', 'en')\r\n    if (!language) language = 'en'\r\n\r\n    let assets = JSON.parse(fs.readFileSync(path.join(__dirname,'../assets/'+language+'.json'),'utf-8'))\r\n\r\n    if(!req.user)\r\n        res.redirect('/')\r\n    else\r\n        res.render('home', {\r\n            title: `Cyclon - ${assets.titles.records}`, \r\n            assets: assets,\r\n            context: req.user,\r\n            path: '/home',\r\n            functions: {\r\n                decryptAES\r\n            }\r\n        })\r\n})\r\n\r\nrouter.get('/recoverPassword', async (req,res) => {\r\n\r\n    let language = req.acceptsLanguages('es', 'en')\r\n    if (!language) language = 'en'\r\n\r\n    let assets = JSON.parse(fs.readFileSync(path.join(__dirname,'../assets/'+language+'.json'),'utf-8'))\r\n\r\n    if(req.query.v && req.query.u){\r\n\r\n        let email = decryptAES(req.query.u)\r\n        let docs = await User.find({email: email})\r\n\r\n        if(docs.length==1){\r\n            if(validateToken(req.query.v)){\r\n\r\n                req.session.tokenRecover = req.query.v\r\n                req.session.userRecover = email\r\n\r\n                res.render('recoverForm', {\r\n                    title: `Cyclon - ${assets.titles.recoverPassword}`,\r\n                    path: '/recoverPassword',\r\n                    assets: assets\r\n                })\r\n\r\n            }\r\n            else{\r\n                res.render('tokenExpired', {\r\n                    title: `Cyclon - ${assets.errors.TOKEN_INVALID}`, \r\n                    path: '/recoverPassword',\r\n                    assets: assets\r\n                })\r\n            }\r\n        }\r\n        else{\r\n            res.redirect('/')\r\n        }\r\n\r\n    }\r\n    \r\n})\r\n\r\nrouter.get('/verifyAccount', async (req,res) => {\r\n\r\n    if(req.query.v && req.query.u){\r\n\r\n        let email = decryptAES(req.query.u)\r\n        let docs = await User.find({email: email})\r\n\r\n        if(docs.length==1){\r\n            if(!docs[0].verify && validateToken(req.query.v)){\r\n                User.updateOne({email: email}, {$set: { verify: true } }, (err,raw) => {\r\n                    if(err) {\r\n                        errorLog.error(err)\r\n                        req.session.verify = true\r\n                        res.redirect('/')\r\n                    }\r\n                    else {\r\n                        res.redirect('/home') \r\n                    }\r\n                })         \r\n            }\r\n            else{\r\n                res.redirect('/')\r\n            }\r\n        }\r\n        else{\r\n            res.redirect('/')\r\n        }\r\n\r\n    }\r\n    else{\r\n        res.redirect('/')\r\n    }\r\n\r\n})\r\n\r\nrouter.get('/update', (req,res) => {\r\n\r\n    if(!req.user){\r\n        res.redirect('/')\r\n    }\r\n    else{\r\n        let language = req.acceptsLanguages('es', 'en')\r\n        if (!language) language = 'en' \r\n\r\n        let assets = JSON.parse(fs.readFileSync(path.join(__dirname,'../assets/'+language+'.json'),'utf-8'))\r\n            \r\n        res.render('update', {\r\n            title: `Cyclon - ${assets.titles.update_info}`, \r\n            assets: assets,\r\n            context: req.user,\r\n            path: '/update',\r\n            functions: {\r\n                decryptAES\r\n            }\r\n        })\r\n    }\r\n\r\n})\r\n\r\n/***************************************\r\n                   API\r\n***************************************/\r\n\r\nrouter.get('/api/resendVerificationEmail', (req,res) => {\r\n\r\n    let language = req.acceptsLanguages('es', 'en')\r\n    if (!language) language = 'en' \r\n\r\n    sendEmail(decryptAES(req.user.email), 'verification', language, req.user.name + ' ' + req.user.lastName, req.user.type, req.user.email)\r\n    res.json({'code': 200, 'msg': 'RESENDED_VEMAIL' }) \r\n\r\n})\r\n\r\nrouter.get('/api/updateLocation', (req,res) => {\r\n\r\n    let geo = geoip.lookup(req.ip)\r\n\r\n    geo = {\r\n        ll: [19, -99]\r\n    }\r\n\r\n    User.updateOne({email: req.user.email}, {$set: { lat: encryptAES(geo[0]), lng: encryptAES(geo[1]) } }, (err,raw) => {\r\n        if(err) \r\n            res.json({'code': 401, 'msg': '500'})\r\n        else{\r\n            res.json({'code': 200, 'msg': 'UPDATED_LOCATION' }) \r\n            req.session.destroy()\r\n            req.logout()\r\n        }\r\n    }) \r\n\r\n})\r\n\r\nrouter.post('/api/updatePassword', (req,res) => {\r\n\r\n    let language = req.acceptsLanguages('es', 'en')\r\n    if (!language) language = 'en' \r\n\r\n    if(req.session.allowChanges){\r\n\r\n        let password = decryptFront(req.body.password)\r\n\r\n        const user = new User()\r\n        const userValidation = user.validateUser( req.user.name, req.user.lastName, decryptAES(req.user.email), password)\r\n\r\n        if(userValidation.length==0){\r\n            User.updateOne({email: req.user.email}, {$set: { password: encryptAES(password) } }, (err,raw) => {\r\n                if(err) \r\n                    res.json({'code': 401, 'msg': '500'})\r\n                else{\r\n                    res.json({'code': 201, 'msg': 'LOGIN_AGAIN' }) \r\n                    req.session.destroy()\r\n                    req.logout()\r\n                }\r\n            }) \r\n        }\r\n        else\r\n            res.json({'code': 401, 'msg': 'BAD_INPUT'})\r\n\r\n    }\r\n\r\n    req.session.allowChanges = false\r\n\r\n})\r\n\r\nrouter.post('/api/updateInfo', async (req,res) => {\r\n\r\n    let language = req.acceptsLanguages('es', 'en')\r\n    if (!language) language = 'en' \r\n\r\n    let newName = decryptFront(req.body.name)\r\n    let newApat = decryptFront(req.body.lastName)\r\n    let newEmail = decryptFront(req.body.email)\r\n\r\n    const user = new User()\r\n\r\n    const userValidation = user.validateUser( newName, newApat, newEmail, decryptAES(req.user.password))\r\n\r\n    if(req.session.allowChanges){\r\n\r\n        if(userValidation.length==0){\r\n\r\n            newEmail = encryptAES(newEmail)\r\n    \r\n            if(req.user.email == newEmail){\r\n                User.updateOne({email: req.user.email}, {$set: { lastName: newApat, name: newName } }, (err,raw) => {\r\n                    if(err) \r\n                        res.json({'code': 401, 'msg': '500'})\r\n                    else\r\n                        res.json({'code': 200, 'msg': 'UPDATE_SUCCESS' })\r\n                }) \r\n            }\r\n            else{\r\n                let docs = await User.find({ email: newEmail })\r\n    \r\n                if(docs.length==0){\r\n                    User.updateOne({email: req.user.email}, {$set: { verify: false, email: newEmail, lastName: newApat, name: newName } }, (err,raw) => {\r\n                        if(err) \r\n                            res.json({'code': 401, 'msg': '500'})                    \r\n                        else {\r\n                            sendEmail(decryptAES(newEmail), 'verification', language, newName + ' ' + newApat, req.user.type, newEmail)\r\n                            res.json({'code': 201, 'msg': 'LOGIN_AGAIN' }) \r\n                            req.session.destroy()\r\n                            req.logout()\r\n                        }\r\n                    }) \r\n                }\r\n                else\r\n                    res.json({'code': 401, 'msg': 'EMAIL_TAKEN'})\r\n            }    \r\n    \r\n        }\r\n        else\r\n            res.json({'code': 401, 'msg': 'BAD_INPUT'})\r\n    }\r\n\r\n    req.session.allowChanges = false\r\n\r\n})\r\n\r\nrouter.post('/api/verifyPassword', (req,res) => {\r\n    if(!req.user){\r\n        res.json({ 'code': 402, 'msg': '' })\r\n        req.session.allowChanges = false\r\n    }\r\n    else{\r\n        if(req.user.password != encryptAES(decryptFront(req.body.password))){\r\n            req.session.allowChanges = false\r\n            res.json({ 'code': 401, 'msg': 'INCORRECT_PASSWORD' })\r\n        }\r\n        else{\r\n            req.session.allowChanges = true\r\n            res.json({ 'code': 200, 'msg': '' })\r\n        }\r\n    }\r\n\r\n})\r\n\r\nrouter.post('/api/changePassword', (req,res) => {\r\n    \r\n    if(req.session.tokenRecover && req.session.userRecover){\r\n\r\n        let password = decryptFront(req.body.password)\r\n\r\n        const user = new User()\r\n        const userValidation = user.validateUser(\"rootroot\", \"rootroot\", decryptAES(req.session.userRecover), password)\r\n\r\n        if(userValidation.length==0){\r\n            User.updateOne({email: req.session.userRecover}, {$set: { password: encryptAES(password) } }, (err,raw) => {\r\n                if(err) \r\n                    res.json({'code': 401, 'msg': '500'})\r\n                else{\r\n                    res.json({'code': 201, 'msg': 'LOGIN_AGAIN' }) \r\n                    req.logout()\r\n                    req.session.destroy()\r\n                }\r\n            }) \r\n        }\r\n        else\r\n            res.json({'code': 401, 'msg': 'BAD_INPUT'})\r\n\r\n    }\r\n    \r\n})\r\n\r\nrouter.post('/api/requestRecoverPassword', async (req,res) => {\r\n\r\n    let language = req.acceptsLanguages('es', 'en')\r\n    if (!language) language = 'en' \r\n\r\n    let email = encryptAES(decryptFront(req.body.email))\r\n    let docs = await User.find({ email: encryptAES(decryptFront(req.body.email)) })\r\n\r\n    if(docs.length==0)\r\n        res.json({ 'code': 401, 'msg': 'USER_NOT_EXIST'})\r\n    else{\r\n        sendEmail(decryptAES(email), 'recover', language, docs[0].name + ' ' + docs[0].lastName, docs[0].type, email)\r\n        res.json({ 'code': 200, 'msg': 'recover_acepted'})\r\n    }\r\n\r\n})\r\n\r\nrouter.get('/api/upgradeUser', async (req,res) => {\r\n    User.updateOne({email: req.user.email, verify: true}, {$set: { type: 1 } }, (err,raw) => {\r\n        if(err) \r\n            res.json({'code': 401, 'msg': '500'})\r\n        else{\r\n            res.json({'code': 201, 'msg': 'LOGIN_AGAIN' }) \r\n            req.logout()\r\n            req.session.destroy()\r\n        }\r\n    })\r\n})\r\n\r\nmodule.exports = router"]}