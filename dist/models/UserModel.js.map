{"version":3,"sources":["../../src/models/UserModel.js"],"names":["Schema","mongoose","UserSchema","name","String","lastName","email","lat","Number","lng","password","type","methods","validateUser","errors","length","push","encryptUser","toString","comparePassword","UserModel","model"],"mappings":";;;;;;;AAAA;;;;AACA;;AACA;;;;IAEQA,M,GAAWC,kB,CAAXD,M;;AAER;;;;;;;;;;;;AAYA,IAAME,aAAa,IAAIF,MAAJ,CAAW;AAC1BG,UAAMC,MADoB;AAE1BC,cAAUD,MAFgB;AAG1BE,WAAOF,MAHmB;AAI1BG,SAAKC,MAJqB;AAK1BC,SAAKD,MALqB;AAM1BE,cAAUN,MANgB;AAO1BO,UAAMH;AAPoB,CAAX,CAAnB;;AAUAN,WAAWU,OAAX,CAAmBC,YAAnB,GAAkC,UAACV,IAAD,EAAOE,QAAP,EAAiBC,KAAjB,EAAwBI,QAAxB,EAAkCC,IAAlC,EAA2C;;AAEzE,QAAIG,SAAS,EAAb;;AAEA,QAAG,CAAC,uBAAWX,IAAX,CAAD,IAAqBA,KAAKY,MAAL,GAAY,EAApC,EAAwCD,OAAOE,IAAP,CAAY,UAAZ;AACxC,QAAG,CAAC,uBAAWX,QAAX,CAAD,IAAyBA,SAASU,MAAT,GAAgB,EAA5C,EAAgDD,OAAOE,IAAP,CAAY,cAAZ;AAChD,QAAG,CAAC,uBAAWV,KAAX,CAAD,IAAsBA,MAAMS,MAAN,GAAa,EAAtC,EAA0CD,OAAOE,IAAP,CAAY,WAAZ;AAC1C,QAAGN,SAASK,MAAT,GAAkB,CAArB,EAAwBD,OAAOE,IAAP,CAAY,cAAZ;;AAExB,WAAOF,MAAP;AAEH,CAXD;;AAaAZ,WAAWU,OAAX,CAAmBK,WAAnB,GAAiC,UAACX,KAAD,EAAQC,GAAR,EAAaE,GAAb,EAAkBC,QAAlB;AAAA,WAAgC;AAC7DJ,eAAO,wBAAWA,KAAX,CADsD;AAE7DC,aAAK,wBAAWA,IAAIW,QAAJ,EAAX,CAFwD;AAG7DT,aAAK,wBAAWA,IAAIS,QAAJ,EAAX,CAHwD;AAI7DR,kBAAU,wBAAWA,QAAX;AAJmD,KAAhC;AAAA,CAAjC;;AAOAR,WAAWU,OAAX,CAAmBO,eAAnB,GAAoC;AAAA,WAChC,UAAKT,QAAL,KAAkB,wBAAWA,QAAX,CADc;AAAA,CAApC;;AAIA,IAAMU,YAAYnB,mBAASoB,KAAT,CAAe,MAAf,EAAuBnB,UAAvB,CAAlB;;QAEQkB,S,GAAAA,S","file":"UserModel.js","sourcesContent":["import mongoose from 'mongoose'\r\nimport {encryptAES} from '../utils/cipher'\r\nimport {checkWords, checkEmail} from '../utils/regex'\r\n\r\nconst { Schema } = mongoose\r\n\r\n/**\r\n * Represents an user.\r\n * @constructor\r\n * @property {String} name - The user's name\r\n * @property {String} lastName - The user's last name\r\n * @property {String} email - The user's email\r\n * @property {Number} lat - The user's GPS latitude\r\n * @property {Number} lng - The user's GPS longitude\r\n * @property {String} password - The user's password\r\n * @property {Number} type - The kind of user (0 -> Normal, 1 -> Scientist, 2-> Administrator)\r\n */\r\n\r\nconst UserSchema = new Schema({\r\n    name: String,\r\n    lastName: String,\r\n    email: String,\r\n    lat: Number,\r\n    lng: Number,\r\n    password: String,\r\n    type: Number\r\n})\r\n\r\nUserSchema.methods.validateUser = (name, lastName, email, password, type) => {\r\n\r\n    let errors = []\r\n\r\n    if(!checkWords(name) && name.length>50) errors.push(\"BAD_NAME\")\r\n    if(!checkWords(lastName) && lastName.length>50) errors.push(\"BAD_LASTNAME\")\r\n    if(!checkEmail(email) && email.length>50) errors.push(\"BAD_EMAIL\")\r\n    if(password.length < 8) errors.push(\"BAD_PASSWORD\")\r\n\r\n    return errors\r\n\r\n}\r\n\r\nUserSchema.methods.encryptUser = (email ,lat ,lng ,password) => ({\r\n    email: encryptAES(email),\r\n    lat: encryptAES(lat.toString()),\r\n    lng: encryptAES(lng.toString()),\r\n    password: encryptAES(password)\r\n})\r\n  \r\nUserSchema.methods.comparePassword= password => (\r\n    this.password === encryptAES(password)\r\n)\r\n\r\nconst UserModel = mongoose.model(\"User\", UserSchema)\r\n\r\nexport {UserModel}"]}