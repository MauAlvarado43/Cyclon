{"version":3,"sources":["../../src/models/UserModel.js"],"names":["Schema","mongoose","UserSchema","name","String","lastName","email","location","lat","lng","password","type","Number","verify","Boolean","methods","validateUser","errors","push","field","error","length","encryptUser","toString","comparePassword","userPassword","UserModel","model"],"mappings":";;;;;;;AAAA;;;;AACA;;AACA;;;;IAEQA,M,GAAWC,kB,CAAXD,M;;AAER;;;;;;;;;;;;AAYA,IAAME,aAAa,IAAIF,MAAJ,CAAW;AAC1BG,UAAMC,MADoB;AAE1BC,cAAUD,MAFgB;AAG1BE,WAAOF,MAHmB;AAI1BG,cAAS;AACLC,aAAKJ,MADA;AAELK,aAAKL;AAFA,KAJiB;AAQ1BM,cAAUN,MARgB;AAS1BO,UAAMC,MAToB;AAU1BC,YAAQC;AAVkB,CAAX,CAAnB;;AAaAZ,WAAWa,OAAX,CAAmBC,YAAnB,GAAkC,UAACb,IAAD,EAAOE,QAAP,EAAiBC,KAAjB,EAAwBI,QAAxB,EAAkCC,IAAlC,EAA2C;;AAEzE,QAAIM,SAAS,EAAb;;AAEA,QAAG,CAAC,uBAAWd,IAAX,CAAJ,EAAsBc,OAAOC,IAAP,CAAY,EAACC,OAAM,MAAP,EAAeC,OAAO,YAAtB,EAAZ;AACtB,QAAGjB,KAAKkB,MAAL,GAAY,CAAf,EAAkBJ,OAAOC,IAAP,CAAY,EAACC,OAAM,MAAP,EAAeC,OAAO,cAAtB,EAAZ;AAClB,QAAGjB,KAAKkB,MAAL,GAAY,EAAf,EAAmBJ,OAAOC,IAAP,CAAY,EAACC,OAAM,MAAP,EAAeC,OAAO,YAAtB,EAAZ;;AAEnB,QAAG,CAAC,uBAAWf,QAAX,CAAJ,EAA0BY,OAAOC,IAAP,CAAY,EAACC,OAAM,UAAP,EAAmBC,OAAO,uBAA1B,EAAZ;AAC1B,QAAGf,SAASgB,MAAT,IAAiB,CAApB,EAAuBJ,OAAOC,IAAP,CAAY,EAACC,OAAM,UAAP,EAAmBC,OAAO,gBAA1B,EAAZ;AACvB,QAAGf,SAASgB,MAAT,GAAgB,EAAnB,EAAuBJ,OAAOC,IAAP,CAAY,EAACC,OAAM,UAAP,EAAmBC,OAAO,cAA1B,EAAZ;;AAEvB,QAAG,CAAC,uBAAWd,KAAX,CAAJ,EAAuBW,OAAOC,IAAP,CAAY,EAACC,OAAM,OAAP,EAAgBC,OAAO,YAAvB,EAAZ;AACvB,QAAGd,MAAMe,MAAN,IAAc,CAAjB,EAAoBJ,OAAOC,IAAP,CAAY,EAACC,OAAM,OAAP,EAAgBC,OAAO,cAAvB,EAAZ;AACpB,QAAGd,MAAMe,MAAN,GAAa,EAAhB,EAAoBJ,OAAOC,IAAP,CAAY,EAACC,OAAM,OAAP,EAAgBC,OAAO,YAAvB,EAAZ;;AAEpB,QAAGV,SAASW,MAAT,GAAgB,CAAnB,EAAsBJ,OAAOC,IAAP,CAAY,EAACC,OAAM,UAAP,EAAmBC,OAAO,gBAA1B,EAAZ;AACtB,QAAGV,SAASW,MAAT,GAAgB,EAAnB,EAAuBJ,OAAOC,IAAP,CAAY,EAACC,OAAM,UAAP,EAAmBC,OAAO,cAA1B,EAAZ;;AAEvB,WAAOH,MAAP;AAEH,CArBD;;AAuBAf,WAAWa,OAAX,CAAmBO,WAAnB,GAAiC,UAAChB,KAAD,EAAQE,GAAR,EAAaC,GAAb,EAAkBC,QAAlB;AAAA,WAAgC;AAC7DJ,eAAO,wBAAWA,KAAX,CADsD;AAE7DE,aAAK,wBAAWA,IAAIe,QAAJ,EAAX,CAFwD;AAG7Dd,aAAK,wBAAWA,IAAIc,QAAJ,EAAX,CAHwD;AAI7Db,kBAAU,wBAAWA,QAAX;AAJmD,KAAhC;AAAA,CAAjC;;AAOAR,WAAWa,OAAX,CAAmBS,eAAnB,GAAqC,UAACd,QAAD,EAAWe,YAAX;AAAA,WACjCA,gBAAgBf,QADiB;AAAA,CAArC;;AAIA,IAAMgB,YAAYzB,mBAAS0B,KAAT,CAAe,MAAf,EAAuBzB,UAAvB,CAAlB;;QAEQwB,S,GAAAA,S","file":"UserModel.js","sourcesContent":["import mongoose from 'mongoose'\r\nimport {encryptAES} from '../utils/cipher'\r\nimport {checkWords, checkEmail} from '../utils/regex'\r\n\r\nconst { Schema } = mongoose\r\n\r\n/**\r\n * Represents an user.\r\n * @constructor\r\n * @property {String} name - The user's name\r\n * @property {String} lastName - The user's last name\r\n * @property {String} email - The user's email\r\n * @property {Number} lat - The user's GPS latitude\r\n * @property {Number} lng - The user's GPS longitude\r\n * @property {String} password - The user's password\r\n * @property {Number} type - The kind of user (0 -> Normal, 1 -> Scientist, 2-> Administrator)\r\n */\r\n\r\nconst UserSchema = new Schema({\r\n    name: String,\r\n    lastName: String,\r\n    email: String,\r\n    location:{\r\n        lat: String,\r\n        lng: String\r\n    },\r\n    password: String,\r\n    type: Number,\r\n    verify: Boolean\r\n})\r\n\r\nUserSchema.methods.validateUser = (name, lastName, email, password, type) => {\r\n\r\n    let errors = []\r\n\r\n    if(!checkWords(name)) errors.push({field:'name', error: 'BAD_FORMAT'})\r\n    if(name.length<0) errors.push({field:'name', error: 'EMPTY_FORMAT'})\r\n    if(name.length>50) errors.push({field:'name', error: 'MAX_LENGTH'})\r\n\r\n    if(!checkWords(lastName)) errors.push({field:'lastName', error: 'ONLY_LETTERS_LASTNAME'})\r\n    if(lastName.length==0) errors.push({field:'lastName', error: 'EMPTY_LASTNAME'})\r\n    if(lastName.length>50) errors.push({field:'lastName', error: 'MAX_LASTNAME'})\r\n\r\n    if(!checkEmail(email)) errors.push({field:'email', error: 'BAD_FORMAT'})\r\n    if(email.length==0) errors.push({field:'email', error: 'EMPTY_FORMAT'})\r\n    if(email.length>50) errors.push({field:'email', error: 'MAX_LENGTH'})\r\n\r\n    if(password.length<8) errors.push({field:'password', error: 'EMPTY_PASSWORD'})\r\n    if(password.length>50) errors.push({field:'password', error: 'MAX_PASSWORD'})\r\n\r\n    return errors\r\n\r\n}\r\n\r\nUserSchema.methods.encryptUser = (email ,lat ,lng ,password) => ({\r\n    email: encryptAES(email),\r\n    lat: encryptAES(lat.toString()),\r\n    lng: encryptAES(lng.toString()),\r\n    password: encryptAES(password)\r\n})\r\n  \r\nUserSchema.methods.comparePassword = (password, userPassword) => (\r\n    userPassword == password\r\n)\r\n\r\nconst UserModel = mongoose.model('User', UserSchema)\r\n\r\nexport {UserModel}"]}