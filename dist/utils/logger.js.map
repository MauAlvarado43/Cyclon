{"version":3,"file":"logger.js","names":["infoLogger","winston","createLogger","level","transports","dailyRotate","timestamp","getDateTime","exitOnError","errorLogger","options","service","logger","version","typeFormat","format","configuredFormatter","stream","write","message","encoding","info","currentdate","Date","datetime","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds"],"sources":["../../src/utils/logger.js"],"sourcesContent":["import winston, { createLogger } from 'winston'\r\nimport {configuredFormatter} from 'winston-json-formatter'\r\nimport dailyRotate from 'winston-daily-rotate-file'\r\n\r\nconst infoLogger = winston.createLogger({\r\n    level: 'info',\r\n    transports: [\r\n      new (dailyRotate)({\r\n          'name': 'access-file',\r\n          'level': 'info',\r\n          'filename': './logs/access.log',\r\n          'json': true,\r\n          'datePattern': 'YYYY-MM-DD',\r\n          'prepend': true,\r\n          'maxFiles': '14d',\r\n          'flags': 'w',\r\n          timestamp : function() {\r\n            return getDateTime()      \r\n          },\r\n          exitOnError: false\r\n      })\r\n    ]\r\n})\r\n\r\nconst errorLogger = createLogger({ \r\n    level: 'error',\r\n    transports: [\r\n      new (dailyRotate)({\r\n          'name': 'error-file',\r\n          'level': 'error',\r\n          'filename': './logs/error.log',\r\n          'json': true,\r\n          'datePattern': 'YYYY-MM-DD',\r\n          'prepend': true,\r\n          'maxFiles': '14d',\r\n          'flags': 'w',\r\n          timestamp : function() {\r\n            return getDateTime()       \r\n          },\r\n          exitOnError: false\r\n      })\r\n    ]\r\n})\r\n\r\nconst options = { \r\n    service: 'Cyclon', \r\n    logger: 'Winston-JSON-Formatter',\r\n    version: '1.0.0', \r\n    typeFormat: 'json'\r\n}\r\n\r\nerrorLogger.format = configuredFormatter(options)\r\ninfoLogger.format = configuredFormatter(options)\r\n\r\ninfoLogger.stream = {\r\n    write: function(message, encoding){\r\n      infoLogger.info(message)\r\n    }\r\n}\r\n\r\nfunction getDateTime(){\r\n    var currentdate = new Date()\r\n    var datetime = currentdate.getDate() + '/'\r\n      + (currentdate.getMonth()+1)  + '/'\r\n      + currentdate.getFullYear() + ' '  \r\n      + currentdate.getHours() + ':'  \r\n      + currentdate.getMinutes() + ':' \r\n      + currentdate.getSeconds()\r\n    return datetime\r\n}\r\n\r\nexport {infoLogger as infoLog, errorLogger as errorLog}"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,UAAU,GAAGC,mBAAA,CAAQC,YAAR,CAAqB;EACpCC,KAAK,EAAE,MAD6B;EAEpCC,UAAU,EAAE,CACV,IAAKC,kCAAL,CAAkB;IACd,QAAQ,aADM;IAEd,SAAS,MAFK;IAGd,YAAY,mBAHE;IAId,QAAQ,IAJM;IAKd,eAAe,YALD;IAMd,WAAW,IANG;IAOd,YAAY,KAPE;IAQd,SAAS,GARK;IASdC,SAAS,EAAG,qBAAW;MACrB,OAAOC,WAAW,EAAlB;IACD,CAXa;IAYdC,WAAW,EAAE;EAZC,CAAlB,CADU;AAFwB,CAArB,CAAnB;;;AAoBA,IAAMC,WAAW,GAAG,IAAAP,qBAAA,EAAa;EAC7BC,KAAK,EAAE,OADsB;EAE7BC,UAAU,EAAE,CACV,IAAKC,kCAAL,CAAkB;IACd,QAAQ,YADM;IAEd,SAAS,OAFK;IAGd,YAAY,kBAHE;IAId,QAAQ,IAJM;IAKd,eAAe,YALD;IAMd,WAAW,IANG;IAOd,YAAY,KAPE;IAQd,SAAS,GARK;IASdC,SAAS,EAAG,qBAAW;MACrB,OAAOC,WAAW,EAAlB;IACD,CAXa;IAYdC,WAAW,EAAE;EAZC,CAAlB,CADU;AAFiB,CAAb,CAApB;;AAoBA,IAAME,OAAO,GAAG;EACZC,OAAO,EAAE,QADG;EAEZC,MAAM,EAAE,wBAFI;EAGZC,OAAO,EAAE,OAHG;EAIZC,UAAU,EAAE;AAJA,CAAhB;AAOAL,WAAW,CAACM,MAAZ,GAAqB,IAAAC,yCAAA,EAAoBN,OAApB,CAArB;AACAV,UAAU,CAACe,MAAX,GAAoB,IAAAC,yCAAA,EAAoBN,OAApB,CAApB;AAEAV,UAAU,CAACiB,MAAX,GAAoB;EAChBC,KAAK,EAAE,eAASC,OAAT,EAAkBC,QAAlB,EAA2B;IAChCpB,UAAU,CAACqB,IAAX,CAAgBF,OAAhB;EACD;AAHe,CAApB;;AAMA,SAASZ,WAAT,GAAsB;EAClB,IAAIe,WAAW,GAAG,IAAIC,IAAJ,EAAlB;EACA,IAAIC,QAAQ,GAAGF,WAAW,CAACG,OAAZ,KAAwB,GAAxB,IACVH,WAAW,CAACI,QAAZ,KAAuB,CADb,IACmB,GADnB,GAEXJ,WAAW,CAACK,WAAZ,EAFW,GAEiB,GAFjB,GAGXL,WAAW,CAACM,QAAZ,EAHW,GAGc,GAHd,GAIXN,WAAW,CAACO,UAAZ,EAJW,GAIgB,GAJhB,GAKXP,WAAW,CAACQ,UAAZ,EALJ;EAMA,OAAON,QAAP;AACH"}