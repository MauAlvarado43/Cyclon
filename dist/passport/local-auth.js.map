{"version":3,"sources":["../../src/passport/local-auth.js"],"names":["passport","serializeUser","user","done","id","deserializeUser","User","findById","use","LocalStrategy","usernameField","passwordField","passReqToCallback","req","email","password","findOne","newUser","userValidation","validateUser","body","name","lastName","length","geo","geoip","lookup","ip","userObject","encryptUser","ll","lat","lng","type","save","flash","comparePassword"],"mappings":"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","file":"local-auth.js","sourcesContent":["  \r\nimport passport from 'passport'\r\nimport {Strategy as LocalStrategy} from 'passport-local'\r\nimport geoip from 'geoip-lite'\r\nimport User from '../models/UserModel'\r\n\r\npassport.serializeUser((user, done) => {\r\n  done(null, user.id);\r\n})\r\n\r\npassport.deserializeUser(async (id, done) => {\r\n  const user = await User.findById(id);\r\n  done(null, user);\r\n})\r\n\r\npassport.use('local-signup', new LocalStrategy({\r\n    usernameField: 'email',\r\n    passwordField: 'password',\r\n    passReqToCallback: true\r\n}, async (req, email, password, done) => {\r\n\r\n    const user = await User.findOne({'email': email})\r\n\r\n    if(user){\r\n        return done('EMAIL_TAKEN', false)\r\n    }\r\n    else{\r\n\r\n        const newUser = new User()\r\n        const userValidation = newUser.validateUser(req.body.name, req.body.lastName, email, password)\r\n\r\n        if(userValidation.length==0){\r\n            let geo = geoip.lookup(req.ip)\r\n\r\n            let userObject = newUser.encryptUser(\r\n                email,\r\n                geo.ll[0],\r\n                geo.ll[1],\r\n                password\r\n            )\r\n        \r\n            newUser.name = req.body.name\r\n            newUser.lastName = req.body.lastName\r\n            newUser.email = userObject.email\r\n            newUser.lat = userObject.lat\r\n            newUser.lng = userObject.lng\r\n            newUser.password = userObject.password\r\n            newUser.type = 0\r\n        \r\n            await newUser.save()\r\n            done(null, newUser)\r\n        }\r\n        else{\r\n            return done(userValidation, false)\r\n        }\r\n        \r\n    }\r\n}))\r\n\r\npassport.use('local-signin', new LocalStrategy({\r\n  usernameField: 'email',\r\n  passwordField: 'password',\r\n  passReqToCallback: true\r\n}, async (req, email, password, done) => {\r\n  const user = await User.findOne({email: email});\r\n  if(!user) {\r\n    return done(null, false, req.flash('signinMessage', 'No User Found'));\r\n  }\r\n  if(!user.comparePassword(password)) {\r\n    return done(null, false, req.flash('signinMessage', 'Incorrect Password'));\r\n  }\r\n  return done(null, user);\r\n}))"]}