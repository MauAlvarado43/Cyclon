{"version":3,"sources":["../../src/passport/local-auth.js"],"names":["passport","serializeUser","user","done","id","deserializeUser","User","findById","use","LocalStrategy","usernameField","passwordField","passReqToCallback","req","emailCrypted","passwordCrypted","email","password","findOne","newUser","userValidation","validateUser","body","name","lastName","length","geo","geoip","lookup","ip","userObject","encryptUser","ll","location","lat","lng","type","verify","save","comparePassword"],"mappings":"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","file":"local-auth.js","sourcesContent":["  \r\nimport passport from 'passport'\r\nimport {Strategy as LocalStrategy} from 'passport-local'\r\nimport geoip from 'geoip-lite'\r\nimport {UserModel as User} from '../models/UserModel'\r\nimport { encryptAES, decryptFront } from '../utils/cipher'\r\n\r\npassport.serializeUser((user, done) => {\r\n  done(null, user.id)\r\n})\r\n\r\npassport.deserializeUser(async (id, done) => {\r\n  const user = await User.findById(id)\r\n  done(null, user)\r\n})\r\n\r\npassport.use('local-signup', new LocalStrategy({\r\n    usernameField: 'email',\r\n    passwordField: 'password',\r\n    passReqToCallback: true\r\n}, async (req, emailCrypted, passwordCrypted, done) => {\r\n\r\n    const email = decryptFront(emailCrypted)\r\n    const password = decryptFront(passwordCrypted)\r\n\r\n    const user = await User.findOne({'email': encryptAES(email)})\r\n\r\n    if(user){\r\n        return done(['EMAIL_TAKEN'], false)\r\n    }\r\n    else{\r\n\r\n        const newUser = new User()\r\n        const userValidation = newUser.validateUser(decryptFront(req.body.name), decryptFront(req.body.lastName), email, password)\r\n\r\n        if(userValidation.length==0){\r\n\r\n            let geo = geoip.lookup(req.ip)\r\n\r\n            if(geo){\r\n\r\n                let userObject = newUser.encryptUser(\r\n                    email,\r\n                    geo.ll[0],\r\n                    geo.ll[1],\r\n                    password\r\n                )\r\n            \r\n                newUser.name = decryptFront(req.body.name)\r\n                newUser.lastName = decryptFront(req.body.lastName)\r\n                newUser.email = userObject.email\r\n                newUser.location.lat = userObject.lat\r\n                newUser.location.lng = userObject.lng\r\n                newUser.password = userObject.password\r\n                newUser.type = 0\r\n                newUser.verify = false\r\n            \r\n                await newUser.save()\r\n                done(null, newUser)\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn done(['BAD_LOCATION'], false)\r\n            }     \t\r\n            \r\n        }\r\n        else{\r\n            return done(userValidation, false)\r\n        }\r\n        \r\n    }\r\n}))\r\n\r\npassport.use('local-signin', new LocalStrategy({\r\n    usernameField: 'email',\r\n    passwordField: 'password',\r\n    passReqToCallback: true\r\n}, async (req, email, password, done) => {\r\n\r\n    const user = await User.findOne({email: encryptAES(decryptFront(email))})\r\n\r\n    if(!user){\r\n        return done(['USER_NOT_EXIST'], false)\r\n    }\r\n    \r\n    if(!user.comparePassword(encryptAES(decryptFront(password)), user.password)) {\r\n        return done(['INCORRECT_PASSWORD'], false)\r\n    }\r\n\r\n    return done(null, user)\r\n\r\n}))"]}